1.¿Cuál es la diferencia entre una clase abstracta y una interfaz en POO?
Una clase abstracta puede tener métodos implementados y no implementados, mientras que una interfaz tradicionalmente solo define métodos

2.¿Cómo se implementa la sobrecarga de métodos y cuál es su utilidad?
permite tener múltiples métodos con el mismo nombre pero diferentes parámetros en una clase, su utilidad es proporcionar diferentes formas de invocar una operación similar.

3.¿Qué es el principio de responsabilidad única en POO y por qué es importante?
 es el primer principio SOLID y establece que una clase debe tener una única razón para cambiar, es decir, debe tener una sola responsabilidad.

4.¿Cuál es la diferencia entre la encapsulación y el ocultamiento de información?
Encapsulación: Agrupa datos y métodos relacionados en una única unidad (clase). Es el "empaquetado" de funcionalidad relacionada.
Ocultamiento: Restringe el acceso a los detalles internos de implementación usando modificadores de acceso (private, protected, public). Es la "protección" de los datos.

5.¿Qué es el polimorfismo dinámico y cómo se aplica en tiempo de ejecución?
permite que una referencia a una clase base invoque métodos de una clase derivada durante la ejecución, mediante la sobrescritura de métodos.

6.¿Cómo se relacionan los conceptos de composición y herencia en POO?
La herencia y la composición son dos formas distintas de reutilizar código:
Herencia: Relación "es un". Una clase hereda propiedades y métodos de otra (un Coche ES UN Vehículo).
Composición: Relación "tiene un". Una clase contiene objetos de otras clases (un Coche TIENE UN Motor).